import DashboardLayout from "@/DashboardLayout";
import { Container, Toolbar, Button } from "@mui/material";
import { DataGrid } from "@mui/x-data-grid";
import Title from "./../../../../components/Title/Title";
import Head from "next/head";
import { useQuery } from "@tanstack/react-query";
import useAxiosSecure from "@/hooks/useAxiosSecure";
import Image from "next/image";
import loading from "../../../../assets/Loading/loading.json";
import swal from "sweetalert";
import useCurrentUser from "@/hooks/useCurrentUser";
import { useRouter } from "next/router";
import dynamic from "next/dynamic";

const Lottie = dynamic(() => import("lottie-react"), { ssr: false });

const Users = () => {
  const axiosSecure = useAxiosSecure();
  const { currentUser } = useCurrentUser();
  const router = useRouter();
  const {
    data: allUsers = [],
    refetch,
    isLoading,
  } = useQuery({
    queryKey: ["users"],
    queryFn: async () => {
      const res = await axiosSecure.get("/user");
      return res.data;
    },
    onSuccess: () => {
      refetch();
    },
  });

  if (isLoading) {
    return (
      <Container
        sx={{
          height: "100vh",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <Lottie animationData={loading} />
      </Container>
    );
  }

  const columns = [
    {
      field: "image",
      headerName: "Image",
      width: 60,
      renderCell: (params) => (
        <Image
          src={params.row.image || ""}
          width={96}
          height={96}
          alt={`Image for ${params.row.fullName}`}
          style={{
            width: "100%",
            height: "auto",
            objectFit: "cover",
            borderRadius: "70%",
          }}
        />
      ),
    },
    { field: "name", headerName: "Name", width: 150 },
    { field: "email", headerName: "Email", width: 180 },
    { field: "role", headerName: "Role", width: 130 },
    {
      field: "actions",
      headerName: "Actions",
      width: 180,
      renderCell: (params) => (
        <div style={{ display: "flex", gap: "4px" }}>
          {params.row.role === "admin" ? (
            <Button variant="contained" disabled color="primary" size="small">
              Make Admin
            </Button>
          ) : (
            <Button
              variant="contained"
              color="primary"
              size="small"
              onClick={() => handleMakeAdmin(params.row._id)}
            >
              Make Admin
            </Button>
          )}
        </div>
      ),
    },
  ];

  const handleMakeAdmin = (id) => {
    swal({
      title: "Are you sure?",
      text: "Do You want to give the admin role to this user?",
      icon: "warning",
      buttons: true,
      dangerMode: true,
    }).then((willDelete) => {
      if (willDelete) {
        axiosSecure.patch(`/user/admin/${id}`).then((res) => {
          if (res.data.modifiedCount > 0) {
            refetch();
            swal("user got the admin role!", {
              icon: "success",
            });
          } else {
            swal("User role is not changed");
          }
        });
      }
    });
  };

  if (currentUser) {
    return (
      <DashboardLayout>
        <Head>
          <title>All Users || EduPulse </title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Toolbar />
        <Title title={"All Our Users"} />
        <Container
          maxWidth="md"
          sx={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            mt: "1rem",
          }}
        >
          <DataGrid
            rows={allUsers}
            columns={columns}
            getRowId={(row) => row._id}
            initialState={{
              pagination: {
                paginationModel: { page: 0, pageSize: 5 },
              },
            }}
            pageSizeOptions={[5, 10]}
            style={{ width: "fit-content" }}
          />
        </Container>
      </DashboardLayout>
    );
  }
};

export default Users;
