import DashboardLayout from "@/DashboardLayout";
import { Button, Chip, Container, Toolbar } from "@mui/material";
import Head from "next/head";
import Title from "./../../../../components/Title/Title";
import Card from "@mui/material/Card";
import CardHeader from "@mui/material/CardHeader";
import CardMedia from "@mui/material/CardMedia";
import CardContent from "@mui/material/CardContent";
import CardActions from "@mui/material/CardActions";
import Avatar from "@mui/material/Avatar";
import Typography from "@mui/material/Typography";
import { red } from "@mui/material/colors";
import { useQuery } from "@tanstack/react-query";
import useAxiosSecure from "@/hooks/useAxiosSecure";
import { useContext } from "react";
import { AuthContext } from "@/Provider/AuthProvider";
import loading from "../../../../assets/Loading/loading.json";
import Link from "next/link";
import swal from "sweetalert";
import dynamic from "next/dynamic";

const Lottie = dynamic(() => import("lottie-react"), { ssr: false });

const MyClass = () => {
  const axiosSecure = useAxiosSecure();
  const { user } = useContext(AuthContext);
  const {
    data: classRequests,
    refetch,
    isLoading,
  } = useQuery({
    queryKey: ["classRequests"],
    queryFn: async () => {
      if (user?.email) {
        const res = await axiosSecure.get(`/classreq?email=${user?.email}`);
        return res.data;
      } else {
        return null;
      }
    },
  });

  if (isLoading) {
    return (
      <Container
        sx={{
          height: "100vh",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <Lottie animationData={loading} />
      </Container>
    );
  }
  refetch();

  const handleDelete = async (id) => {
    const willDelete = await swal({
      title: "Are you sure?",
      text: "Are you sure that you want to delete this file?",
      icon: "warning",
      dangerMode: true,
    });

    if (willDelete) {
      axiosSecure.delete(`/classreq/${id}`).then((res) => {
        if (res.data.deletedCount > 0) {
          swal("Deleted!", "Your imaginary file has been deleted!", "success");
        }
      });
    }
  };

  return (
    <DashboardLayout>
      <Head>
        <title>My Class|| EduPulse </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Toolbar />
      <Title title={"My"} titleColor={"Classes"} />

      <Container
        maxWidth="xl"
        sx={{
          my: "4rem",
          display: "flex",
          gap: "1rem",
          flexWrap: "wrap",
          justifyContent: "center",
        }}
      >
        {classRequests &&
          classRequests.map((classItem) => (
            <Card key={classItem?._id} sx={{ maxWidth: 345 }}>
              <CardHeader
                avatar={
                  <Avatar
                    sx={{ bgcolor: red[500] }}
                    src={classItem.userImage}
                    aria-label="teacher"
                  >
                    {classItem.teacherName}
                  </Avatar>
                }
                title={classItem.teacher}
                subheader={classItem.teacherMail}
              />
              <CardMedia
                component="img"
                height="194"
                image={classItem.image}
                alt={classItem.title}
              />
              <CardContent>
                <Typography height={130} variant="body2" color="text.secondary">
                  {classItem.shortDesc.slice(0, 211)}...
                </Typography>
                <div
                  style={{ display: "flex", justifyContent: "space-between" }}
                >
                  <Typography
                    variant="p"
                    fontWeight="bold"
                    color="text.secondary"
                  >
                    price: ${classItem.price}
                  </Typography>
                  <Typography
                    variant="p"
                    fontWeight="bold"
                    color="text.secondary"
                  >
                    <Chip
                      label={classItem.status.toUpperCase()}
                      color={
                        classItem.status === "approved" ? "success" : "error"
                      }
                    />
                  </Typography>
                </div>
              </CardContent>
              {classItem.status === "approved" && (
                <CardActions
                  sx={{
                    display: "flex",
                    justifyContent: "space-between",
                    mx: "1rem",
                    mb: "4px",
                  }}
                >
                  <Link
                    href={`/dashboard/teacher/myclass/update/${classItem._id}`}
                  >
                    {" "}
                    <Button size="md" variant="contained" color="success">
                      Update
                    </Button>
                  </Link>
                  <Button
                    onClick={() => handleDelete(classItem._id)}
                    size="md"
                    variant="contained"
                    color="error"
                  >
                    Delete
                  </Button>
                </CardActions>
              )}
            </Card>
          ))}
      </Container>
    </DashboardLayout>
  );
};

export default MyClass;
