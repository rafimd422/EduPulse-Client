import { useRouter } from "next/router";
import DashboardLayout from "@/DashboardLayout";
import {
  Button,
  Grid,
  TextField,
  TextareaAutosize,
  Toolbar,
} from "@mui/material";
import Head from "next/head";
import { Container } from "@mui/material";
import Title from "@/components/Title/Title";
import loading from "../../../../../assets/Loading/loading.json";
import { useQuery } from "@tanstack/react-query";
import { useContext } from "react";
import { AuthContext } from "@/Provider/auth-provider";
import useAxiosSecure from "@/hooks/useAxiosSecure";
import swal from "sweetalert";
import dynamic from "next/dynamic";

const Lottie = dynamic(() => import("lottie-react"), { ssr: false });

const Update = () => {
  const router = useRouter();
  const { id } = router.query;
  const authContext = useContext(AuthContext);
  const user = authContext?.user;
  const axiosSecure = useAxiosSecure();
  const {
    data: updateClassReq,
    refetch,
    isLoading,
  } = useQuery({
    queryKey: ["updateClassReq"],
    queryFn: async () => {
      if (user?.email) {
        const res = await axiosSecure.get(`/classreq/${id}`);
        return res.data;
      } else {
        return null;
      }
    },
  });
  if (updateClassReq === null) {
    refetch();
  }
  if (isLoading) {
    return (
      <Container
        sx={{
          height: "100vh",
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <Lottie animationData={loading} />
      </Container>
    );
  }

  const handleClassUpdating = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    try {
      const formData = new FormData(e.target as HTMLFormElement);

      const updatedData = {
        courseTitle: formData.get("courseTitle"),
        price: formData.get("price"),
        image: formData.get("image"),
        shortDesc: formData.get("shortDesc"),
        courseOutline: formData.get("courseOutline"),
      };
      const res = await axiosSecure.patch(`/classreq/${id}`, updatedData);
      if (res.data.modifiedCount > 0) {
        swal(
          "Your Class has been Added!",
          "Please Wait For the admin response!",
          "success"
        );
        router.push("/dashboard/teacher/addclass");
      }
    } catch (error) {
      console.error("Error updating class:", error);
    }
  };

  return (
    <DashboardLayout>
      <Head>
        <title>EduPulse || Update class</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Toolbar />
      <Title title={"Update"} titleColor={"Class"} />

      <Container component="form" onSubmit={handleClassUpdating}>
        <Grid container spacing={3}>
          <Grid item xs={12} md={6}>
            <TextField
              required
              id="title"
              name="courseTitle"
              label="Course Title"
              fullWidth
              variant="standard"
              defaultValue={updateClassReq?.courseTitle}
              onChange={(e) => {
                e.target.value;
              }}
            />
          </Grid>
          <Grid item xs={12} md={6}>
            <TextField
              required
              type="number"
              id="price"
              name="price"
              label="Course Price"
              fullWidth
              variant="standard"
              value={updateClassReq?.price}
              onChange={(e) => {
                e.target.value;
              }}
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <label htmlFor="image">Thumbnall</label>
            <TextField
              required
              fullWidth
              id="image"
              value={updateClassReq?.image}
              name="image"
              variant="standard"
            />
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextareaAutosize
              name="shortDesc"
              aria-label="max width"
              required
              defaultValue={updateClassReq?.shortDesc}
              minRows={4}
              placeholder="Short description"
              style={{ width: "100%" }}
            />
          </Grid>
          <Grid item sm={12} md={12}>
            <TextareaAutosize
              name="courseOutline"
              aria-label="max width"
              defaultValue={updateClassReq?.courseOutline}
              required
              minRows={4}
              placeholder="Write the course Ourline Here"
              style={{ width: "100%" }}
            />
          </Grid>
          <Grid item sm={12} md={4}>
            <Button
              type="submit"
              sx={{
                backgroundColor: "#800000",
                color: "white",
                fontWeight: "bold",
                "&:hover": {
                  backgroundColor: "gray",
                },
              }}
            >
              Update Course
            </Button>
          </Grid>
        </Grid>
      </Container>
    </DashboardLayout>
  );
};

export default Update;
